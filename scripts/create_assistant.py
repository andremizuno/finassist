#!/usr/bin/env python3
"""
Script para criar um OpenAI Assistant com as configura√ß√µes necess√°rias.

Este script facilita a cria√ß√£o do Assistant na OpenAI Platform com todas
as ferramentas e instru√ß√µes necess√°rias para o Assistente Financeiro.

Uso:
    python scripts/create_assistant.py
"""

import os
from openai import OpenAI
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Instru√ß√µes do Assistant
ASSISTANT_INSTRUCTIONS = """
Voc√™ √© um assistente financeiro pessoal inteligente e amig√°vel.

Suas responsabilidades:
1. Ajudar o usu√°rio a registrar despesas e receitas
2. Fornecer an√°lises e insights sobre gastos
3. Responder perguntas sobre finan√ßas pessoais
4. Ser proativo em sugerir economia e melhores pr√°ticas

Diretrizes:
- Seja sempre educado e emp√°tico
- Use linguagem clara e acess√≠vel
- Pe√ßa confirma√ß√£o antes de registrar despesas
- Forne√ßa resumos claros quando solicitado
- Use emojis quando apropriado (üí∞ üìä ‚úÖ)

Formato de dados:
- Datas: YYYY-MM-DD
- Valores: sempre em R$ (reais brasileiros)
- Categorias comuns: Alimenta√ß√£o, Transporte, Moradia, Lazer, Sa√∫de, Educa√ß√£o, Outros
"""

# Defini√ß√£o das ferramentas (tools)
TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "add_expense",
            "description": "Adiciona uma nova despesa √† planilha de controle financeiro",
            "parameters": {
                "type": "object",
                "properties": {
                    "workbook_id": {
                        "type": "string",
                        "description": "ID do arquivo Excel no OneDrive"
                    },
                    "worksheet_name": {
                        "type": "string",
                        "description": "Nome da planilha/aba (ex: 'Despesas')"
                    },
                    "date": {
                        "type": "string",
                        "description": "Data da despesa no formato YYYY-MM-DD"
                    },
                    "description": {
                        "type": "string",
                        "description": "Descri√ß√£o da despesa"
                    },
                    "category": {
                        "type": "string",
                        "description": "Categoria da despesa (ex: Alimenta√ß√£o, Transporte)"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Valor da despesa em reais"
                    }
                },
                "required": ["workbook_id", "worksheet_name", "date", "description", "category", "amount"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_expense_history",
            "description": "Recupera hist√≥rico de despesas da planilha",
            "parameters": {
                "type": "object",
                "properties": {
                    "workbook_id": {
                        "type": "string",
                        "description": "ID do arquivo Excel no OneDrive"
                    },
                    "worksheet_name": {
                        "type": "string",
                        "description": "Nome da planilha/aba"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Filtros opcionais (ex: {'category': 'Alimenta√ß√£o'})",
                        "properties": {
                            "category": {
                                "type": "string",
                                "description": "Filtrar por categoria"
                            }
                        }
                    }
                },
                "required": ["workbook_id", "worksheet_name"]
            }
        }
    }
]


def create_assistant():
    """Cria o Assistant na OpenAI Platform."""
    
    print("=" * 70)
    print(" ü§ñ Criando OpenAI Assistant")
    print("=" * 70)
    
    # Verificar API key
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("\n‚ùå Erro: OPENAI_API_KEY n√£o encontrada no .env")
        return
    
    print(f"\n‚úì API Key encontrada: {api_key[:10]}...")
    
    # Inicializar cliente
    client = OpenAI(api_key=api_key)
    
    print("\nüìã Configura√ß√£o do Assistant:")
    print(f"  - Nome: Assistente Financeiro")
    print(f"  - Modelo: gpt-4-turbo-preview")
    print(f"  - Ferramentas: {len(TOOLS)}")
    
    try:
        # Criar Assistant
        print("\nüîÑ Criando Assistant na OpenAI Platform...")
        
        assistant = client.beta.assistants.create(
            name="Assistente Financeiro",
            instructions=ASSISTANT_INSTRUCTIONS,
            model="gpt-4-turbo-preview",
            tools=TOOLS
        )
        
        print("\n‚úÖ Assistant criado com sucesso!")
        print(f"\nüìù ASSISTANT_ID: {assistant.id}")
        print("\n‚ö†Ô∏è  IMPORTANTE: Adicione este ID ao seu arquivo .env:")
        print(f"   ASSISTANT_ID={assistant.id}")
        
        print("\nüìä Detalhes:")
        print(f"  - ID: {assistant.id}")
        print(f"  - Nome: {assistant.name}")
        print(f"  - Modelo: {assistant.model}")
        print(f"  - Ferramentas: {len(assistant.tools)}")
        
        print("\n‚ú® Pronto! Agora voc√™ pode usar o assistente.")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao criar Assistant: {str(e)}")


if __name__ == '__main__':
    create_assistant()

